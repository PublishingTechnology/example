/* parsing search expressions */
/*c:\javacc-4.1\bin\javacc -LOOKAHEAD:2147483647 -debug_parser -force_la_check:true -output_directory:.\com\ingenta\search\setest SearchExpressionParser.jj


javac -classpath c:\javacc-4.1\bin\lib\javacc.jar com\ingenta\search\setest\*.java

java -cp . com.ingenta.search.SearchExpParser "\"ECONOMIC CRISIS\" OR (canada OR (shale NOT \"oil field\"))"
*/
options {
STATIC = false;
MULTI = true;

}
PARSER_BEGIN(SearchExpressionParser)

package com.ingenta.search.parse;

import java.io.*;
import java.util.List;

import com.ingenta.search.domain.SearchTerm;

public class SearchExpressionParser {

public SearchExpressionParser(String s) {

	this((Reader)(new StringReader(new String(s.getBytes(),"UTF-8"))));
}

public static void main( String[] args ){
	Node root = null;
        try
        {
              String query = args[0];
              query = query.replaceAll("\\)", " \\) ").replaceAll("\\(", " \\( ").replaceAll("[ ]+", " ").replaceAll(" $", "");
              SearchExpressionParser parser = new SearchExpressionParser(query + " \n");
              ASTinput e = parser.input();
              e.dump(">");
              root = parser.jjtree.rootNode();
              root.interpret();              
        }
        catch(Exception e)
        {
              e.printStackTrace();
        }
    }
    
public List<SearchTerm> parseSearchTerms() throws ParseException{
	
	List<SearchTerm> list = null;
		ASTinput e = this.input();
		Node root = this.jjtree.rootNode();
		list = ((SimpleNode)root).getSearchTermList();	
	return list;
	
}
    
    
}

PARSER_END(SearchExpressionParser)


SPECIAL_TOKEN : { " " }
TOKEN :{ < EF : ["\n","\r"] > }
TOKEN : { < OR : "OR" > }
TOKEN : { < AND : "AND" | "UND" > }
TOKEN : { < NOT : "NOT" | "NICHT"> }
TOKEN : { < LPAR : "(" > }
TOKEN : { < RPAR : ")" > }
TOKEN : { < STRING : (["\u0021","\u0023"-"\u0026","\u002A"-"\uFFFF"])+ > } 
TOKEN : { < PHRASE : (("\"" (~["\""])+ "\"") | ("'" (~["'"])+ "'")) > }


ASTinput input() :
{
}
{
(stringorphraseorgroup())*
<EF>
{return jjtThis;}
}


void group() :
{
}
{

<LPAR> (stringorphraseorgroup())* <RPAR>
|
<LPAR> stringorphraseorgroup() (operator() stringorphraseorgroup())* <RPAR>
}



void stringorphraseorgroup() :
{
}
{
stringorphrase() (operator() stringorphraseorgroup())*
|
group() (operator() stringorphraseorgroup())*
|
stringorphrase()
|
group()

}

void stringorphrase() : 
{
Token t;
}
{
(
t=<STRING> 
{ 
	try{
		jjtThis.val = new String(t.image.trim().getBytes(),"UTF-8");
	}
	catch(Exception e){
		
	}
} 
| 
t=<PHRASE> 
{ 
	try{
		jjtThis.val = new String(t.image.trim().getBytes(),"UTF-8");
	}
	catch(Exception e){
		
	}
} 

)
}


void operator() :
{
Token t;
}
{
(
t=<AND> {jjtThis.val = t.image.trim();} 
|
t=<NOT> {jjtThis.val = t.image.trim();}
| 
t=<OR> {jjtThis.val = t.image.trim();}
)
}