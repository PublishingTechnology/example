/* Generated By:JJTree&JavaCC: Do not edit this line. SearchExpressionParser.java */
package com.ingenta.search.parse;

import java.io.*;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.ingenta.search.domain.SearchTerm;

public class SearchExpressionParser/*@bgen(jjtree)*/implements SearchExpressionParserTreeConstants, SearchExpressionParserConstants {/*@bgen(jjtree)*/
   
   private static final Logger LOG = Logger.getLogger(SearchExpressionParser.class);
   
  protected JJTSearchExpressionParserState jjtree = new JJTSearchExpressionParserState();
public SearchExpressionParser(String s) throws UnsupportedEncodingException {
	//  this((Reader)(new StringReader(s)));
/*		s = s.replaceAll(" +", " AND ");
        s = s.replaceAll(" -", " NOT ");    */ 
        this((Reader)(new StringReader(new String(s.replaceAll(" \\+", " AND ").replaceAll(" \\-", " NOT ")))));
}

public static void main( String[] args ){
        Node root = null;
        try
        {
              String query = args[0];
              query = query.replaceAll("\\)", " \\) ").replaceAll("\\(", " \\( ").replaceAll("[ ]+", " ").replaceAll(" $", "");
              query = query.replaceAll(" \\+", " AND ");
              query = query.replaceAll(" \\-", " NOT ");              
              SearchExpressionParser parser = new SearchExpressionParser(query + " \n");
              ASTinput e = parser.input();
              e.dump(">");
              root = parser.jjtree.rootNode();
              root.interpret();
        }
        catch(Exception e)
        {
              e.printStackTrace();
        }
    }

public List<SearchTerm> parseSearchTerms() throws ParseException{

        List<SearchTerm> list = null;
                ASTinput e = this.input();
                Node root = this.jjtree.rootNode();
                list = ((SimpleNode)root).getSearchTermList();
        return list;

}

  final public ASTinput input() throws ParseException {
    trace_call("input");
    try {
 /*@bgen(jjtree) input */
  ASTinput jjtn000 = new ASTinput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_1:
        while (true) {
          if (jj_2_1(1000)) {
            ;
          } else {
            break label_1;
          }
          stringorphraseorgroup();
        }
        jj_consume_token(EF);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("input");
    }
  }

  final public void group() throws ParseException {
    trace_call("group");
    try {
 /*@bgen(jjtree) group */
  ASTgroup jjtn000 = new ASTgroup(JJTGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_4(1000)) {
          jj_consume_token(LPAR);
          label_2:
          while (true) {
            if (jj_2_2(1000)) {
              ;
            } else {
              break label_2;
            }
            stringorphraseorgroup();
          }
          jj_consume_token(RPAR);
        } else if (jj_2_5(1000)) {
          jj_consume_token(LPAR);
          stringorphraseorgroup();
          label_3:
          while (true) {
            if (jj_2_3(1000)) {
              ;
            } else {
              break label_3;
            }
            operator();
            stringorphraseorgroup();
          }
          jj_consume_token(RPAR);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("group");
    }
  }

  final public void stringorphraseorgroup() throws ParseException {
    trace_call("stringorphraseorgroup");
    try {
 /*@bgen(jjtree) stringorphraseorgroup */
  ASTstringorphraseorgroup jjtn000 = new ASTstringorphraseorgroup(JJTSTRINGORPHRASEORGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        if (jj_2_8(1000)) {
          stringorphrase();
          label_4:
          while (true) {
            if (jj_2_6(1000)) {
              ;
            } else {
              break label_4;
            }
            operator();
            stringorphraseorgroup();
          }
        } else if (jj_2_9(1000)) {
          group();
          label_5:
          while (true) {
            if (jj_2_7(1000)) {
              ;
            } else {
              break label_5;
            }
            operator();
            stringorphraseorgroup();
          }
        } else if (jj_2_10(1000)) {
          stringorphrase();
        } else if (jj_2_11(1000)) {
          group();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("stringorphraseorgroup");
    }
  }

  final public void stringorphrase() throws ParseException {
    trace_call("stringorphrase");
    try {
 /*@bgen(jjtree) stringorphrase */
ASTstringorphrase jjtn000 = new ASTstringorphrase(JJTSTRINGORPHRASE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
      try {
        if (jj_2_12(1000)) {
          t = jj_consume_token(STRING);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
        try{
                jjtn000.val = new String(t.image.trim());
        }
        catch(Exception e){

        }
        } else if (jj_2_13(1000)) {
          t = jj_consume_token(PHRASE1);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
        try{
                jjtn000.val = new String(t.image.trim());
        }
        catch(Exception e){

        }
        } else if (jj_2_14(1000)) {
          t = jj_consume_token(PHRASE2);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
        try{
                jjtn000.val = new String(t.image.trim());
        }
        catch(Exception e){

        }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("stringorphrase");
    }
  }

  final public void operator() throws ParseException {
    trace_call("operator");
    try {
 /*@bgen(jjtree) operator */
ASToperator jjtn000 = new ASToperator(JJTOPERATOR);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
      try {
        if (jj_2_15(1000)) {
          t = jj_consume_token(AND);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.val = t.image.trim();
        } else if (jj_2_16(1000)) {
          t = jj_consume_token(NOT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.val = t.image.trim();
        } else if (jj_2_17(1000)) {
          t = jj_consume_token(OR);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
        jjtn000.val = t.image.trim();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("operator");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3_4() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(PHRASE2)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(PHRASE1)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_7()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_7()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SearchExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SearchExpressionParser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SearchExpressionParser(InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SearchExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SearchExpressionParser(Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SearchExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SearchExpressionParser(SearchExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SearchExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[11];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 11; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private void trace_call(String s) {
       LOG.log(Level.DEBUG, "Call:   " + s);
  }

  private void trace_return(String s) {
      LOG.log(Level.DEBUG, "Return: " + s);
  }

  private void trace_token(Token t, String where) {
     LOG.log(Level.DEBUG, "Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        LOG.log(Level.DEBUG, ": \"" + t.image + "\"");
      }
      LOG.log(Level.DEBUG, " at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
  }

  private void trace_scan(Token t1, int t2) {
      LOG.log(Level.DEBUG, "Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        LOG.log(Level.DEBUG, ": \"" + t1.image + "\"");
      }
      LOG.log(Level.DEBUG, " at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
